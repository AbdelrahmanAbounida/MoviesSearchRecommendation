import { searchMoviesByTitle } from "@/lib/search-movie"
import { MoviePorps } from "@/lib/types"
import { initializeApp } from "firebase/app"
import {getAuth} from 'firebase/auth'
import {doc, getDoc, getFirestore, setDoc, updateDoc} from 'firebase/firestore'

export const firebaseConfig = {
    apiKey: process.env.NEXT_PUBLIC_API_KEY,
    authDomain: process.env.NEXT_PUBLIC_AUTH_DOMAIN,
    projectId: process.env.NEXT_PUBLIC_PROJECT_ID,
    storageBucket: process.env.NEXT_PUBLIC_STORAGE_BUCKET,
    messagingSenderId: process.env.NEXT_PUBLIC_MESSAGING_SENDER_ID,
    appId: process.env.NEXT_PUBLIC_APP_ID,
    measurementId: process.env.NEXT_PUBLIC_MEASUREMENT_ID
}
export const app = initializeApp(firebaseConfig)
export const db = getFirestore(app)
export const auth = getAuth(app)


export interface SearchedMovie{
  Title:string;
  Type:string;
}

export type SearchedMoviesData = {
  SearchedMovies : SearchedMovie[];
  date : string;
}

export const setUserSearchMovies = async(userId:any,searchKey:string)=>{

  const searchedMovies = await getUserMovies(userId);
  const movies:string[] = searchedMovies?.SearchedMovies
  const today = new Date().toISOString().slice(0, 10);

  if(!movies || !movies.includes(searchKey)){
    if(movies){
      await updateDoc(doc(db, "SearchMovies", userId), {
        SearchedMovies:[...movies.slice(-500),searchKey],
        date:today
      }
        );
    }
    else{
      await updateDoc(doc(db, "SearchMovies", userId), {
        SearchedMovies:[searchKey],
        date:today
      }
        );
    }

    
  }

}

export const getUserMovies = async(userId:any)=>{
    const moviesDoc = await getDoc(doc(db, "SearchMovies", userId))
    if (moviesDoc.exists()) {
      return moviesDoc.data()
    }
    else{
      const today = new Date();
      const dateString = today.toISOString().slice(0, 10);
      return {SearchedMovies:[],date:dateString,recommendedMovies:[]}
    }
  }

  /* it takes recommeded moviestitles generated by api and then generatesmovies and update database */

  export const updateUserRecommendedMovies= async (userId:any,oldRecommendedMovies:MoviePorps[],recommendedMovies:MoviePorps[])=>{

    const today = new Date().toISOString().slice(0, 10);

    if(recommendedMovies?.length < 5){
      let i = -1;
      while(recommendedMovies.length<5){
        if(!recommendedMovies.includes(oldRecommendedMovies[i]) && Math.abs(i) < oldRecommendedMovies.length){
          recommendedMovies.push(oldRecommendedMovies[i])
          i--
        }
      }
    }
    
    await updateDoc(doc(db, "SearchMovies", userId), {
      
        RecommendedMovies:recommendedMovies,
        date:today
      }
    );
    
    return recommendedMovies
  }